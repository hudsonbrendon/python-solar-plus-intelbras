{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation","text":""},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras","title":"<code>SolarPlusIntelbras</code>","text":"<p>A class to represent a SolarPlusIntelbras.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>class SolarPlusIntelbras:\n    \"\"\"A class to represent a SolarPlusIntelbras.\"\"\"\n\n    __BASE_API_URL = \"https://ens-server.intelbras.com.br/api/\"\n\n    def __init__(\n        self,\n        email: EmailStr,\n        plus: str,\n    ) -&gt; None:\n        \"\"\"Construct a SolarPlusIntelbras object.\n\n        Args:\n            email (EmailStr): A valid email address.\n            plus (str): A string.\n\n        Returns:\n            None: The constructor does not return anything.\n        \"\"\"\n        self.__email = email\n        self.__plus = plus\n        self.__token = None\n        self._token_expiration = None\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the object.\n\n        Returns:\n            str: A string representation of the object.\n        \"\"\"\n        return f\"&lt;SolarPlusIntelbras {self.email}&gt;\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the object.\n\n        Returns:\n            str: A string representation of the object.\n        \"\"\"\n        return self.__str__()\n\n    @property\n    def email(self) -&gt; EmailStr:\n        \"\"\"Return the email attribute.\n\n        Returns:\n            EmailStr: A valid email address.\n        \"\"\"\n        return self.__email\n\n    @property\n    def plus(self) -&gt; str:\n        \"\"\"Return the plus attribute.\n\n        Returns:\n            str: A string.\n        \"\"\"\n        return self.__plus\n\n    @property\n    def base_api_url(self) -&gt; str:\n        \"\"\"Return the base_api_url attribute.\n\n        Returns:\n            str: The base API URL.\n        \"\"\"\n        return self.__BASE_API_URL\n\n    @property\n    def token(self) -&gt; str:\n        \"\"\"Returns the token. If the token is missing or expired, requests a new one.\n\n        Returns:\n            str: The token.\n        \"\"\"\n        if not self.__token or self._is_token_expired():\n            self._login()\n        return self.__token\n\n    def _is_token_expired(self) -&gt; bool:\n        \"\"\"Checks if the token has expired by comparing the current time with the expiration time.\n\n        Returns:\n            bool: True if the token has expired, False otherwise.\n        \"\"\"\n        if not self._token_expiration:\n            return True\n        return datetime.now(timezone.utc) &gt;= self._token_expiration\n\n    def _login(self) -&gt; dict:\n        \"\"\"Faz a requisi\u00e7\u00e3o de login, armazena o token e tempo de expira\u00e7\u00e3o.\n\n        Returns:\n            dict: A dictionary with the login response.\n        \"\"\"\n        response = requests.post(\n            f\"{self.base_api_url}{EndpointEnum.LOGIN.value}\",\n            json={\"email\": self.email},\n            headers={\"plus\": self.plus},\n        )\n        data = response.json()\n\n        access_data = data[\"accessToken\"]\n        self.__token = access_data[\"accessJWT\"]\n\n        if \"exp\" in access_data:\n            expires_ts = access_data[\"exp\"]\n            self._token_expiration = datetime.utcfromtimestamp(expires_ts).replace(\n                tzinfo=timezone.utc\n            )\n        else:\n            self._token_expiration = datetime.now(timezone.utc)\n\n        return data\n\n    def plants(self) -&gt; dict:\n        \"\"\"Return the plants.\n\n        Returns:\n            dict: A dictionary with the plants.\n        \"\"\"\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        )\n        return response.json()\n\n    def plants_detail(self, plant_id: int) -&gt; dict:\n        \"\"\"Return the plant.\n\n        Args:\n            plant_id (int): A plant id.\n\n        Returns:\n            dict: A dictionary with the plants.\n        \"\"\"\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        )\n        return response.json()\n\n    def records(\n        self,\n        plant_id: int,\n        period: PeriodEnum,\n        key: Optional[KeyEnum] = None,\n        start_date: Optional[str] = None,\n        end_date: Optional[str] = None,\n    ) -&gt; dict:\n        \"\"\"Return the records.\n\n        Args:\n            plant_id (int): A plant id.\n            period (PeriodEnum): A period.\n            key (Optional[KeyEnum], optional): A key. Defaults to None.\n            start_date (Optional[str], optional): A start date. Defaults to None.\n            end_date (Optional[str], optional): An end date. Defaults to None.\n\n        Returns:\n            dict: A dictionary with the records.\n        \"\"\"\n        params = {}\n\n        if period:\n            params[\"period\"] = period\n\n        if key:\n            params[\"key\"] = key\n\n        if start_date:\n            try:\n                datetime.strptime(start_date, \"%Y-%m-%d\")\n                params[\"start_date\"] = start_date\n            except ValueError:\n                raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n        if end_date:\n            try:\n                datetime.strptime(end_date, \"%Y-%m-%d\")\n                params[\"end_date\"] = end_date\n            except ValueError:\n                raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n\n    def records_year(\n        self,\n        year: int,\n        plant_id: int,\n    ) -&gt; dict:\n        \"\"\"Return the records of a year.\n\n        Args:\n            year (int): A year.\n            plant_id (int): A plant id.\n\n        Returns:\n            dict: A dictionary with the records.\n        \"\"\"\n        params = {\n            \"key\": KeyEnum.ENERGY_TODAY.value,\n            \"year\": year,\n            \"period\": PeriodEnum.YEAR.value,\n        }\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS_YEAR.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n\n    def records_years(\n        self,\n        start_year: int,\n        end_year: int,\n        plant_id: int,\n    ) -&gt; dict:\n        \"\"\"Return the records of a year.\n\n        Args:\n            start_year (int): A year.\n            end_year (int): A year.\n            plant_id (int): A plant id.\n\n        Returns:\n            dict: A dictionary with the records.\n        \"\"\"\n\n        params = {\n            \"start_year\": start_year,\n            \"end_year\": end_year,\n            \"key\": KeyEnum.ENERGY_TODAY.value,\n        }\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS_YEARS.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n\n    def inverters(self, plant_id: int, limit: int = 20, page: int = 1) -&gt; dict:\n        \"\"\"Return the inverters.\n\n        Args:\n            limit (int): A limit.\n            page (int): A page.\n\n        Returns:\n            dict: A dictionary with the inverters.\n        \"\"\"\n        params = {\"limit\": limit, \"page\": page}\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.INVERTERS.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n\n    def alerts(\n        self,\n        plant_id: int,\n        start_date: str,\n        end_date: str,\n        limit: int = 20,\n        page: int = 1,\n    ) -&gt; dict:\n        \"\"\"Return the alerts.\n\n        Args:\n            plant_id (int): A plant id.\n            start_date (str): A start date.\n            end_date (str): An end date.\n            limit (int, optional): A limit. Defaults to 20.\n            page (int, optional): A page. Defaults to 1.\n\n        Returns:\n            dict: A dictionary with the alerts.\n        \"\"\"\n        params = {\n            \"limit\": limit,\n            \"page\": page,\n        }\n\n        if start_date:\n            try:\n                datetime.strptime(start_date, \"%Y-%m-%d\")\n                params[\"start_date\"] = start_date\n            except ValueError:\n                raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n        if end_date:\n            try:\n                datetime.strptime(end_date, \"%Y-%m-%d\")\n                params[\"end_date\"] = end_date\n            except ValueError:\n                raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/alerts\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n\n    def notifications(\n        self,\n        start_date: str,\n        end_date: str,\n        pendings: bool = True,\n        page: int = 1,\n    ) -&gt; dict:\n        \"\"\"Return the notifications.\n\n        Args:\n            start_date (str): A start date.\n            end_date (str): An end date.\n            pendings (bool, optional): A boolean. Defaults to True.\n            page (int, optional): A page. Defaults to 1.\n\n        Returns:\n            dict: A dictionary with the notifications.\n        \"\"\"\n        params = {\n            \"pendings\": pendings,\n            \"page\": page,\n        }\n\n        if start_date:\n            try:\n                datetime.strptime(start_date, \"%Y-%m-%d\")\n                params[\"start_date\"] = start_date\n            except ValueError:\n                raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n        if end_date:\n            try:\n                datetime.strptime(end_date, \"%Y-%m-%d\")\n                params[\"end_date\"] = end_date\n            except ValueError:\n                raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n        response = requests.get(\n            f\"{self.base_api_url}{EndpointEnum.USER.value}/{EndpointEnum.NOTIFICATIONS.value}\",\n            headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n            params=params,\n        )\n        return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.base_api_url","title":"<code>base_api_url</code>  <code>property</code>","text":"<p>Return the base_api_url attribute.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The base API URL.</p>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.email","title":"<code>email</code>  <code>property</code>","text":"<p>Return the email attribute.</p> <p>Returns:</p> Name Type Description <code>EmailStr</code> <code>EmailStr</code> <p>A valid email address.</p>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.plus","title":"<code>plus</code>  <code>property</code>","text":"<p>Return the plus attribute.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string.</p>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.token","title":"<code>token</code>  <code>property</code>","text":"<p>Returns the token. If the token is missing or expired, requests a new one.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The token.</p>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.__init__","title":"<code>__init__(email, plus)</code>","text":"<p>Construct a SolarPlusIntelbras object.</p> <p>Parameters:</p> Name Type Description Default <code>email</code> <code>EmailStr</code> <p>A valid email address.</p> required <code>plus</code> <code>str</code> <p>A string.</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>The constructor does not return anything.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def __init__(\n    self,\n    email: EmailStr,\n    plus: str,\n) -&gt; None:\n    \"\"\"Construct a SolarPlusIntelbras object.\n\n    Args:\n        email (EmailStr): A valid email address.\n        plus (str): A string.\n\n    Returns:\n        None: The constructor does not return anything.\n    \"\"\"\n    self.__email = email\n    self.__plus = plus\n    self.__token = None\n    self._token_expiration = None\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation of the object.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the object.\n\n    Returns:\n        str: A string representation of the object.\n    \"\"\"\n    return self.__str__()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation of the object.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the object.\n\n    Returns:\n        str: A string representation of the object.\n    \"\"\"\n    return f\"&lt;SolarPlusIntelbras {self.email}&gt;\"\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.alerts","title":"<code>alerts(plant_id, start_date, end_date, limit=20, page=1)</code>","text":"<p>Return the alerts.</p> <p>Parameters:</p> Name Type Description Default <code>plant_id</code> <code>int</code> <p>A plant id.</p> required <code>start_date</code> <code>str</code> <p>A start date.</p> required <code>end_date</code> <code>str</code> <p>An end date.</p> required <code>limit</code> <code>int</code> <p>A limit. Defaults to 20.</p> <code>20</code> <code>page</code> <code>int</code> <p>A page. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the alerts.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def alerts(\n    self,\n    plant_id: int,\n    start_date: str,\n    end_date: str,\n    limit: int = 20,\n    page: int = 1,\n) -&gt; dict:\n    \"\"\"Return the alerts.\n\n    Args:\n        plant_id (int): A plant id.\n        start_date (str): A start date.\n        end_date (str): An end date.\n        limit (int, optional): A limit. Defaults to 20.\n        page (int, optional): A page. Defaults to 1.\n\n    Returns:\n        dict: A dictionary with the alerts.\n    \"\"\"\n    params = {\n        \"limit\": limit,\n        \"page\": page,\n    }\n\n    if start_date:\n        try:\n            datetime.strptime(start_date, \"%Y-%m-%d\")\n            params[\"start_date\"] = start_date\n        except ValueError:\n            raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n    if end_date:\n        try:\n            datetime.strptime(end_date, \"%Y-%m-%d\")\n            params[\"end_date\"] = end_date\n        except ValueError:\n            raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/alerts\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.inverters","title":"<code>inverters(plant_id, limit=20, page=1)</code>","text":"<p>Return the inverters.</p> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>A limit.</p> <code>20</code> <code>page</code> <code>int</code> <p>A page.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the inverters.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def inverters(self, plant_id: int, limit: int = 20, page: int = 1) -&gt; dict:\n    \"\"\"Return the inverters.\n\n    Args:\n        limit (int): A limit.\n        page (int): A page.\n\n    Returns:\n        dict: A dictionary with the inverters.\n    \"\"\"\n    params = {\"limit\": limit, \"page\": page}\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.INVERTERS.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.notifications","title":"<code>notifications(start_date, end_date, pendings=True, page=1)</code>","text":"<p>Return the notifications.</p> <p>Parameters:</p> Name Type Description Default <code>start_date</code> <code>str</code> <p>A start date.</p> required <code>end_date</code> <code>str</code> <p>An end date.</p> required <code>pendings</code> <code>bool</code> <p>A boolean. Defaults to True.</p> <code>True</code> <code>page</code> <code>int</code> <p>A page. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the notifications.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def notifications(\n    self,\n    start_date: str,\n    end_date: str,\n    pendings: bool = True,\n    page: int = 1,\n) -&gt; dict:\n    \"\"\"Return the notifications.\n\n    Args:\n        start_date (str): A start date.\n        end_date (str): An end date.\n        pendings (bool, optional): A boolean. Defaults to True.\n        page (int, optional): A page. Defaults to 1.\n\n    Returns:\n        dict: A dictionary with the notifications.\n    \"\"\"\n    params = {\n        \"pendings\": pendings,\n        \"page\": page,\n    }\n\n    if start_date:\n        try:\n            datetime.strptime(start_date, \"%Y-%m-%d\")\n            params[\"start_date\"] = start_date\n        except ValueError:\n            raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n    if end_date:\n        try:\n            datetime.strptime(end_date, \"%Y-%m-%d\")\n            params[\"end_date\"] = end_date\n        except ValueError:\n            raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.USER.value}/{EndpointEnum.NOTIFICATIONS.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.plants","title":"<code>plants()</code>","text":"<p>Return the plants.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the plants.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def plants(self) -&gt; dict:\n    \"\"\"Return the plants.\n\n    Returns:\n        dict: A dictionary with the plants.\n    \"\"\"\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.plants_detail","title":"<code>plants_detail(plant_id)</code>","text":"<p>Return the plant.</p> <p>Parameters:</p> Name Type Description Default <code>plant_id</code> <code>int</code> <p>A plant id.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the plants.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def plants_detail(self, plant_id: int) -&gt; dict:\n    \"\"\"Return the plant.\n\n    Args:\n        plant_id (int): A plant id.\n\n    Returns:\n        dict: A dictionary with the plants.\n    \"\"\"\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.records","title":"<code>records(plant_id, period, key=None, start_date=None, end_date=None)</code>","text":"<p>Return the records.</p> <p>Parameters:</p> Name Type Description Default <code>plant_id</code> <code>int</code> <p>A plant id.</p> required <code>period</code> <code>PeriodEnum</code> <p>A period.</p> required <code>key</code> <code>Optional[KeyEnum]</code> <p>A key. Defaults to None.</p> <code>None</code> <code>start_date</code> <code>Optional[str]</code> <p>A start date. Defaults to None.</p> <code>None</code> <code>end_date</code> <code>Optional[str]</code> <p>An end date. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the records.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def records(\n    self,\n    plant_id: int,\n    period: PeriodEnum,\n    key: Optional[KeyEnum] = None,\n    start_date: Optional[str] = None,\n    end_date: Optional[str] = None,\n) -&gt; dict:\n    \"\"\"Return the records.\n\n    Args:\n        plant_id (int): A plant id.\n        period (PeriodEnum): A period.\n        key (Optional[KeyEnum], optional): A key. Defaults to None.\n        start_date (Optional[str], optional): A start date. Defaults to None.\n        end_date (Optional[str], optional): An end date. Defaults to None.\n\n    Returns:\n        dict: A dictionary with the records.\n    \"\"\"\n    params = {}\n\n    if period:\n        params[\"period\"] = period\n\n    if key:\n        params[\"key\"] = key\n\n    if start_date:\n        try:\n            datetime.strptime(start_date, \"%Y-%m-%d\")\n            params[\"start_date\"] = start_date\n        except ValueError:\n            raise ValueError(\"start_date must be in the format YYYY-MM-DD.\")\n\n    if end_date:\n        try:\n            datetime.strptime(end_date, \"%Y-%m-%d\")\n            params[\"end_date\"] = end_date\n        except ValueError:\n            raise ValueError(\"end_date must be in the format YYYY-MM-DD.\")\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.records_year","title":"<code>records_year(year, plant_id)</code>","text":"<p>Return the records of a year.</p> <p>Parameters:</p> Name Type Description Default <code>year</code> <code>int</code> <p>A year.</p> required <code>plant_id</code> <code>int</code> <p>A plant id.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the records.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def records_year(\n    self,\n    year: int,\n    plant_id: int,\n) -&gt; dict:\n    \"\"\"Return the records of a year.\n\n    Args:\n        year (int): A year.\n        plant_id (int): A plant id.\n\n    Returns:\n        dict: A dictionary with the records.\n    \"\"\"\n    params = {\n        \"key\": KeyEnum.ENERGY_TODAY.value,\n        \"year\": year,\n        \"period\": PeriodEnum.YEAR.value,\n    }\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS_YEAR.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"},{"location":"#solar_plus_intelbras.solar_plus_intelbras.SolarPlusIntelbras.records_years","title":"<code>records_years(start_year, end_year, plant_id)</code>","text":"<p>Return the records of a year.</p> <p>Parameters:</p> Name Type Description Default <code>start_year</code> <code>int</code> <p>A year.</p> required <code>end_year</code> <code>int</code> <p>A year.</p> required <code>plant_id</code> <code>int</code> <p>A plant id.</p> required <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary with the records.</p> Source code in <code>solar_plus_intelbras/solar_plus_intelbras.py</code> <pre><code>def records_years(\n    self,\n    start_year: int,\n    end_year: int,\n    plant_id: int,\n) -&gt; dict:\n    \"\"\"Return the records of a year.\n\n    Args:\n        start_year (int): A year.\n        end_year (int): A year.\n        plant_id (int): A plant id.\n\n    Returns:\n        dict: A dictionary with the records.\n    \"\"\"\n\n    params = {\n        \"start_year\": start_year,\n        \"end_year\": end_year,\n        \"key\": KeyEnum.ENERGY_TODAY.value,\n    }\n\n    response = requests.get(\n        f\"{self.base_api_url}{EndpointEnum.PLANTS.value}/{plant_id}/{EndpointEnum.RECORDS_YEARS.value}\",\n        headers={\"Authorization\": f\"Bearer {self.token}\", \"plus\": self.plus},\n        params=params,\n    )\n    return response.json()\n</code></pre>"}]}